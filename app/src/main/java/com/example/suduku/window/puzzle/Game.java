package com.example.suduku.window.puzzle;

import android.util.Log;

import java.util.Arrays;

public class Game {
    private final String[] levelArr = {
            "030647080709000206010903040301070804800304002402050603080501020103000409020439060",
            "301845609000060000500309002109000305630000091807000204200504003000010000403297806",
            "301845609000060000500309002109000305630000091807000204200504003000010000403297806",
            "048000920003815400500000001001506800070209010002108500700000003009751200014000750",
            "000001000004008500020790010008010062007805300430060700080072050005400100000100000",
            "720000003000008040060000890100830005004010900300045002051000020030600000200000018",
            "007040910200009500580000006090050000700203005000010020400000081001700009065020700",
            "040500000060200371010073000005102049007030800280907600000760080471005030000004090",
            "037002040400096003001300607810000200020000060006000051905007800300560009070900530",
            "613507004000009007007004806789000002000000000400000683802600700500900000100802495",
            "030607000506001400091000050300010067000306000650020004060000240003500609000709010",

            "000020306002100000680500001004060083900000007870090400700003064000008100401070000",
            "670002004000700806089050700900103070007080300030205009006090280701008000800600097",
            "910030000000600002070002054305000060006040100020000405850100040200004000000020086",
            "000000801006098000080103406001050640090602070063080900905806030000970100807000000",
            "709100008004006000000400035090070304000801000508030020830005000000200600100007809",
            "004000600500286007200010009320000074000371000910000036800030001100642003003000200",
            "028004000900000060507120000001700008002040300800001600000015906090000002000900810",
            "000184000040000030709602105097000420600000007028000390902408703050000080000291000",
            "009530600003000000500091028005803009306000804900104200790420003000000400002017900",
            "000002010308091000000630050420000500039000160001000072090043000000520709060900000",

            "500000000070406800003009021000000032005000700640000000750600100004502070000000008",
            "040010206030590801000400000618000000000020000000000163000005000106079080704060030",
            "001093006023610070000000020900000000005361700000000004080000000090086350100450800",
            "060948020000000000400105009604000802900701004105000706200306007000000000050412030",
            "046375890000000000000892000005903100020000050003206700000137000000000000097648310",
            "230960001000007008000803000023000905400010003709000160000501000600300000800092057",
            "003050020400700008000020400020010003316000987900060040009080000200006009050070300",
            "108000307930060015000301000000106000801704603000805000000208000580070091603000408",
            "900030001003608900080010020040000050705000304030000080070040090009507200800060007",
            "900460000007200000034079200790008500306000809005900032009630480000004300000085007",

            "300000009070040030006103500007030800080204010005070600002307400010060020800000007",
            "050007009400010070001020000070500001046000320100004060000050800090070004600300090",
            "602305701000090000500108003703000204010000030806000107900504002000010000108203905",
            "400100820010003070007804001006200300900000004002007500700602100060700030025001006",
            "005008000048079000790003800000000437010000080354000000001800064000910520000600900",
            "900500004020900570000023080290010400004209100008050092060830000032007010700002005",
            "900003780000049065006500000000000940000476000035000000000008300560290000082300004",
            "001096000060800001000073005600200090400907006070005008700350000900002010000760300",
            "500002089420800510070050000100503060005000300030706005000020090096008054850900006",
            "360500024100600003000430000000000316003000500759000000000074000900006005240005098"};


    public int[][] mSubject = new int[9][9];//9*9的数组,用于存放数独的数据
    public int[][] mNotes = new int[9][9];//当前数独的笔记
    public boolean[][][] mSign = new boolean[9][9][9];//当前数独的标记。[i][j][k],i表示行,j表示列,k表示k+1标记是否存在。比如mSign[1][2][3]==true表示第1行第2列的3标记存在。
    public boolean mIsSignMode = false;//是否为标记模式
    public boolean mIsFinish = false;//是否完成游戏

    //将str字符串转换为数组
    public void init(int level) {
        //将str字符串转换为数组
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                mSubject[i][j] = levelArr[level].charAt(j * 9 + i) - '0';
            }
        }
        //将answers数组中的数字拷贝到notes数组中
        for (int i = 0; i < 9; i++) {
            System.arraycopy(mSubject[i], 0, mNotes[i], 0, 9);
        }
        //打印结果
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                System.out.print(mSubject[i][j] + " ");
            }
            System.out.println();
            System.out.println();
        }
    }


    //输入数独坐标，返回不可用数值数组
    public int[] getPossibleNotes(int x, int y) {
        int[] notValue = new int[30];

        //如果题目中的数字，返回123456789
        if (mSubject[x][y] != 0) {
            for (int i = 0; i < 9; i++) {
                notValue[i] = i + 1;
            }
            return notValue;
        }

        //定义数组存储不能出现的数字
        int index = 0;
        //横排数字
        for (int i = 0; i < 9; i++) {
            if (i != x && mNotes[i][y] != 0) {
                notValue[index] = mNotes[i][y];
                index++;
            }
            if (i != y && mNotes[x][i] != 0) {
                notValue[index] = mNotes[x][i];
                index++;
            }
        }

        int boxLeftTopX = x / 3 * 3;
        int boxLeftTopY = y / 3 * 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int boxX = boxLeftTopX + i;
                int boxY = boxLeftTopY + j;
                if (boxX != x && boxY != y && mNotes[boxX][boxY] != 0) {
                    notValue[index] = mNotes[boxX][boxY];
                    index++;
                }
            }
        }

        //升序排序notValue数组
        for (int i = 0; i < index - 1; i++) {
            for (int j = i + 1; j < index; j++) {
                if (notValue[i] > notValue[j]) {
                    int temp = notValue[i];
                    notValue[i] = notValue[j];
                    notValue[j] = temp;
                }
            }
        }

        int repeatCount = 0;
        //判断notValue数组中是否有重复的数字，如果有，则删除重复的数字
        for (int i = 0; i < index - 1; i++) {
            if (notValue[i] == notValue[i + 1]) {
                notValue[i] = 0;
                repeatCount++;
            }
        }

        //删除notValue数组中的0
        int[] possibleNotes = new int[index - repeatCount];
        int j = 0;
        for (int i = 0; i < index; i++) {
            if (notValue[i] != 0) {
                possibleNotes[j] = notValue[i];
                j++;
            }
        }
        return possibleNotes;
    }
}
